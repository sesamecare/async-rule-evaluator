import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'java-library'
    id 'antlr'
    id 'signing'
    id 'maven-publish'
    id("com.vanniktech.maven.publish") version "0.30.0"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.toVersion(21)
    targetCompatibility = JavaVersion.toVersion(21)
}

tasks.withType(JavaCompile).configureEach {
    options.release = 21
}

def jdk21 = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(21) }
tasks.withType(Test).configureEach { javaLauncher = jdk21 }
tasks.withType(JavaExec).configureEach { javaLauncher = jdk21 }

group = "com.sesamecare"
version = (findProperty("version") ?: System.getenv("VERSION") ?: "0.0.1-SNAPSHOT")

repositories() {
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.10.1'
    implementation 'org.antlr:antlr4-runtime:4.10.1'
    implementation 'org.apache.commons:commons-configuration2:2.9.0'

    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.hamcrest:java-hamcrest:2.0.0.0")
    testImplementation("com.google.code.gson:gson:2.10.1")
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${java.time.LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt

generateGrammarSource {
    arguments += ["-visitor", "-package", "com.sesamecare.asyncRuleEvaluator"]
}

// Ensure anything that packages/inspects sources runs after ANTLR
def gen = tasks.named("generateGrammarSource")

tasks.named("compileJava") { dependsOn(gen) } // (usually already true, but safe)

tasks.withType(Javadoc).configureEach { dependsOn(gen) }

// Only *configure* the existing jars; do not create new ones
tasks.matching { it.name in ["jar", "sourcesJar", "javadocJar"] }.configureEach {
    dependsOn(gen)
}

test {
    useJUnitPlatform()
}

javadoc {
    exclude("com/sesamecare/asyncRuleEvaluator/FiltrexLexer.java")
    exclude("com/sesamecare/asyncRuleEvaluator/FiltrexParser.java")
    exclude("com/sesamecare/asyncRuleEvaluator/FiltrexBaseListener.java")
    exclude("com/sesamecare/asyncRuleEvaluator/FiltrexBaseVisitor.java")
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()

    // Coordinates can be inferred from group/artifact/version, but set explicitly if you like:
    coordinates("com.sesamecare", "async-rule-evaluator", version as String)

    pom {
        name.set("async-rule-evaluator")
        description.set("A simple DSL based on https://github.com/joewalnes/filtrex and its forks")
        url.set("https://github.com/sesamecare/async-rule-evaluator")
        licenses {
            license {
                name.set("The MIT License")
                url.set("https://opensource.org/license/mit/")
            }
        }
        developers {
            developer {
                id.set("djmax")
                name.set("Max Metral")
            }
        }
        scm {
            url.set("https://github.com/sesamecare/async-rule-evaluator")
            connection.set("scm:git://github.com/sesamecare/async-rule-evaluator.git")
            developerConnection.set("scm:git://github.com/sesamecare/async-rule-evaluator.git")
        }
    }
}

signing {
    def key = findProperty("signingKey") ?: System.getenv("PGP_SECRET")
    def pass = findProperty("signingPassword") ?: System.getenv("PGP_PASSPHRASE")
    useInMemoryPgpKeys(key, pass)
}